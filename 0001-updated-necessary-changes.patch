From 259efefbc397e75bba5c1d075cfa1c8e5b4f8032 Mon Sep 17 00:00:00 2001
From: iampal <cyberhawk108@gmail.com>
Date: Thu, 5 Oct 2023 19:55:49 +0530
Subject: [PATCH] updated necessary changes

---
 src/App.tsx   | 20 +++++++++--
 src/Graph.tsx | 93 +++++++++++++++++++++++++++------------------------
 2 files changed, 67 insertions(+), 46 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..48e46e4 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph : Boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,19 +31,31 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if (this.state.showGraph) {
     return (<Graph data={this.state.data}/>)
   }
+}
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+    let x = 0;
+    const interval = setInterval(() => {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
-  }
+      this.setState({ 
+        data: serverResponds,
+        showGraph: true,
+     });
+   });
+   x++;
+   if (x > 1000) {
+     clearInterval (interval);
+   }
+ }, 100);
+}
 
   /**
    * Render the App react component
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..2b0cb17 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,21 +1,21 @@
-import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
-import { ServerRespond } from './DataStreamer';
+import React, {Component} from 'react';
+import {Table} from '@finos/perspective';
+import {ServerRespond} from './DataStreamer';
 import './Graph.css';
 
 /**
  * Props declaration for <Graph />
  */
 interface IProps {
-  data: ServerRespond[],
+    data: ServerRespond[],
 }
 
 /**
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
-  load: (table: Table) => void,
+interface PerspectiveViewerElement extends HTMLElement {
+    load: (table: Table) => void,
 }
 
 /**
@@ -23,51 +23,58 @@ interface PerspectiveViewerElement {
  * parsed from its parent through data property.
  */
 class Graph extends Component<IProps, {}> {
-  // Perspective table
-  table: Table | undefined;
+    // Perspective table
+    table: Table | undefined;
 
-  render() {
-    return React.createElement('perspective-viewer');
-  }
+    render() {
+        return React.createElement('perspective-viewer');
+    }
 
-  componentDidMount() {
-    // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    componentDidMount() {
+        // Get element to attach the table from the DOM.
+        const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
-    const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
-    };
+        const schema = {
+            stock: 'string',
+            top_ask_price: 'float',
+            top_bid_price: 'float',
+            timestamp: 'date',
+        };
 
-    if (window.perspective && window.perspective.worker()) {
-      this.table = window.perspective.worker().table(schema);
-    }
-    if (this.table) {
-      // Load the `table` in the `<perspective-viewer>` DOM reference.
+        if (window.perspective && window.perspective.worker()) {
+            this.table = window.perspective.worker().table(schema);
+        }
+        if (this.table) {
+            // Load the `table` in the `<perspective-viewer>` DOM reference.
 
-      // Add more Perspective configurations here.
-      elem.load(this.table);
+            // Add more Perspective configurations here.
+            elem.load(this.table);
+            elem.setAttribute("view", "y_line");
+            elem.setAttribute("column-pivots", '["stock"]');
+            elem.setAttribute("row_pivots", '["timestamp"]');
+            elem.setAttribute("columns", '["top_ask_price"]');
+            elem.setAttribute("aggregates",
+                '{"stock":"distinct_count", "top_ask_price":"avg", "top_bid_price":"avg", "timestamp":"distinct_count"}'
+            );
+        }
     }
-  }
 
-  componentDidUpdate() {
-    // Everytime the data props is updated, insert the data into Perspective table
-    if (this.table) {
-      // As part of the task, you need to fix the way we update the data props to
-      // avoid inserting duplicated entries into Perspective table again.
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
-        return {
-          stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
-        };
-      }));
+    componentDidUpdate() {
+        // Everytime the data props is updated, insert the data into Perspective table
+        if (this.table) {
+            // As part of the task, you need to fix the way we update the data props to
+            // avoid inserting duplicated entries into Perspective table again.
+            this.table.update(this.props.data.map((el: any) => {
+                // Format the data from ServerRespond to the schema
+                return {
+                    stock: el.stock,
+                    top_ask_price: el.top_ask && el.top_ask.price || 0,
+                    top_bid_price: el.top_bid && el.top_bid.price || 0,
+                    timestamp: el.timestamp,
+                };
+            }));
+        }
     }
-  }
 }
 
 export default Graph;
-- 
2.39.3 (Apple Git-145)

